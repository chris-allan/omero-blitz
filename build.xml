<?xml version="1.0" encoding="utf-8"?>
<project name="blitz" default="install" basedir=".">

    <property name="import.dir" value="${basedir}/../antlib/resources"/>
    <import file="${import.dir}/global.xml"/>
    <import file="${import.dir}/lifecycle.xml"/>

    <!-- Class that will be called via "java -jar" on this artifact -->
    <property name="main.class" value="ome.services.blitz.Entry"/>

        <target name="clean" depends="lifecycle.clean">
            <delete dir="${basedir}/generated"/>
        </target>

	<target name="compile" depends="generate,icegen" unless="skip.compile">
		<hard-wire file="ome/services/blitz/fire/SessionManagerI.java"
		    token="&quot;ome.security.basic.BasicSecurityWiring&quot;"/>

                <!-- WORKAROUND: Attempting to compile mutually dependent directories
                     via javac is quite complicated. Moving the difficult file out of the way -->
                <property name="file.real.sessionmanager" value="${src.dest}/ome/services/blitz/fire/SessionManagerI.java"/>
                <property name="file.fake.sessionmanager" value="${src.dest}/ome/services/blitz/fire/SessionManagerI.fake"/>
                <move file="${file.real.sessionmanager}" tofile="${file.fake.sessionmanager}"/>
		<myjavac>
		    <src path="${src.dir}"/>
		    <src path="${src.dest}"/>
		    <src path="${basedir}/generated"/>
                    <include name="omero/**"/>
                    <include name="omero/model/**"/>
		    <include name="ome/services/blitz/util/ConvertToBlitzExceptionMessage.java"/>
		</myjavac>
		<myjavac>
		    <src path="${src.dir}"/>
		    <src path="${src.dest}"/>
		    <src path="${basedir}/generated"/>
                    <exclude name="omero/**"/>
                    <exclude name="omero/model/**"/>
		</myjavac>
                <move file="${file.fake.sessionmanager}" tofile="${file.real.sessionmanager}"/>
		<myjavac>
		    <include name="**/SessionManagerI.java"/>
		    <src path="${src.dest}"/>
		</myjavac>
                <delete file="${file.real.sessionmanager}"/>
                <delete file="${file.fake.sessionmanager}"/><!-- Just in case -->
	</target>

    <!-- = = = = = = = = = = = = = = = = =
          generate model
         = = = = = = = = = = = = = = = = = -->

        <macrodef name="split-combined">
            <attribute name="all" default="all"/>
            <attribute name="prefix"/>
            <attribute name="todir"/>
            <element name="filesetAndMapper" implicit="true"/>
            <sequential>
            <copy todir="@{todir}">
                <filesetAndMapper/>
                <filterchain>
                    <linecontainsregexp>
                        <regexp pattern="^\[@{all}\]|^\[@{prefix}\]"/>
                    </linecontainsregexp>
                    <tokenfilter>
                        <replaceregex pattern="^\[@{all}\]\s?" replace=""/>
                        <replaceregex pattern="^\[@{prefix}\]\s?" replace=""/>
                    </tokenfilter>
                </filterchain>
            </copy>
            </sequential>
        </macrodef>

        <target name="icegen" depends="prepare">
		<property name="gen.dir" value="${basedir}/generated"/>
		<property name="comb.dir" value="${basedir}/target/combined"/>
		<mkdir dir="${comb.dir}/omero/api"/>
		<mkdir dir="${comb.dir}/omero/model"/>
		<mkdir dir="${gen.dir}/omero/api"/>
		<mkdir dir="${gen.dir}/omero/model"/>
		<taskdef classname="ome.dsl.DSLTask" classpathref="omero.classpath" name="dsl"/>

		<!-- Not "combined" files-->
		<selector id="ifNewerThanCombined">
			<depend targetdir="${comb.dir}">
				<mapper>
					<mapper type="merge" to="ImageI.combined"/>
				</mapper>
			</depend>
		</selector>
		<dsl template="${resrc.dir}/templates/java_ice_map.vm" filepattern="${gen.dir}/omero/util/IceMap.java">
			<fileset dir="${model.comp}/resources" includes="${dsl.pat}">
				<selector refid="ifNewerThanCombined"/>
			</fileset>
		</dsl>
		<dsl template="${resrc.dir}/templates/java_obj_reg.vm" filepattern="${gen.dir}/omero/util/ObjectFactoryRegistrar.java">
			<fileset dir="${model.comp}/resources" includes="${dsl.pat}">
				<selector refid="ifNewerThanCombined"/>
			</fileset>
		</dsl>
		<dsl template="${resrc.dir}/templates/cpp_obj_reg.vm" filepattern="${gen.dir}/omero/ObjectFactoryRegistrar.cpp">
			<fileset dir="${model.comp}/resources" includes="${dsl.pat}">
				<selector refid="ifNewerThanCombined"/>
			</fileset>
		</dsl>

		<!-- "combined" files which must be further parsed-->
		<dsl template="${resrc.dir}/templates/combined.vm" filepattern="${comb.dir}/{class-name}I.combined">
			<fileset dir="${model.comp}/resources" includes="${dsl.pat}">
				<selector refid="ifNewerThanCombined"/>
			</fileset>
		</dsl>

		<dsl template="${resrc.dir}/templates/factorymap.vm" filepattern="${comb.dir}/FactoryMap.combined">
			<fileset dir="${model.comp}/resources" includes="${dsl.pat}">
				<selector refid="ifNewerThanCombined"/>
			</fileset>
		</dsl>

		<!--
		    This section takes the output of the combined.vm template and splits it into
		    the various sections. All of these files represent the Ice model and our
		    specializations of it
		-->
		<selector id="ifNewerThanOutput">
			<depend targetdir="${gen.dir}/omero/model/">
				<mapper>
					<flattenmapper/>
					<mapper type="glob" from="*" to="*"/>
				</mapper>
			</depend>
		</selector>
		<split-combined todir="${gen.dir}" prefix="hdr">
			<fileset dir="${comb.dir}" includes="**/*.combined">
				<selector refid="ifNewerThanOutput"/>
			</fileset>
			<regexpmapper from="(.*?)I[.]combined" to="omero/model/\1I.h"/>
		</split-combined>
		<split-combined todir="${gen.dir}" prefix="cpp">
			<fileset dir="${comb.dir}" includes="**/*.combined">
				<selector refid="ifNewerThanOutput"/>
			</fileset>
			<regexpmapper from="(.*?)I[.]combined" to="omero/model/\1I.cpp"/>
		</split-combined>
		<split-combined todir="${gen.dir}" prefix="jav">
			<fileset dir="${comb.dir}" includes="**/*.combined">
				<selector refid="ifNewerThanOutput"/>
			</fileset>
			<regexpmapper from="(.*?)I[.]combined" to="omero/model/\1I.java"/>
		</split-combined>
		<split-combined todir="${gen.dir}" prefix="pyc">
			<fileset dir="${comb.dir}" includes="**/*.combined">
				<selector refid="ifNewerThanOutput"/>
			</fileset>
			<regexpmapper from="(.*?)I[.]combined" to="omero_model_\1I.py"/>
		</split-combined>
		<split-combined todir="${gen.dir}" prefix="ice">
			<fileset dir="${comb.dir}" includes="**/*.combined">
				<selector refid="ifNewerThanOutput"/>
			</fileset>
			<regexpmapper from="(.*?)I[.]combined" to="omero/model/\1.ice"/>
		</split-combined>
		<!--
		    This does the same fore the factorymap.vm template.
		-->
		<split-combined todir="${gen.dir}" prefix="pyc">
			<fileset dir="${comb.dir}" includes="FactoryMap.combined">
				<selector refid="ifNewerThanOutput"/>
			</fileset>
			<regexpmapper from="FactoryMap.combined" to="omero/util/FactoryMap.py"/>
		</split-combined>

		<!--
		    By deleting from the target directory what already exists under
		    src/ or resources/ it is possible to override code generation.
		-->
		<delete>
			<fileset dir="${gen.dir}" includes="**/*.java">
				<present present="both" targetdir="${src.dir}"/>
			</fileset>
			<fileset dir="${gen.dir}" includes="**/*.ice">
				<present present="both" targetdir="${resrc.dir}"/>
			</fileset>
			<fileset dir="${gen.dir}" includes="**/*.ice">
				<present present="both" targetdir="${resrc.dir}"/>
			</fileset>
			<fileset dir="${gen.dir}" includes="**/*.h">
				<present present="both" targetdir="${src.dir}/cpp"/>
			</fileset>
			<fileset dir="${gen.dir}" includes="**/*.cpp">
				<present present="both" targetdir="${src.dir}/cpp"/>
			</fileset>
		</delete>
		<scons_py>
			<arg value="-Q"/>
		</scons_py>
	</target>

	<target name="dist" depends="package,install" unless="skip.compile"><!-- install for standalone -->
	  <copy todir="${dist.dir}/bin">
            <fileset dir="${basedir}/bin" includes="**/*"/>
          </copy>
	  <copy todir="${dist.dir}/etc">
            <fileset dir="${basedir}/etc" includes="**/*"/>
	    <fileset dir="${resrc.dir}" includes="*.config"/>
	    <flattenmapper/>
	  </copy>
	  <copy todir="${dist.dir}/include">
	    <fileset dir="${resrc.dest}" includes="**/*.h"/>
	    <fileset dir="${resrc.dir}"  includes="**/*.ice"/>
	    <fileset dir="${resrc.dest}" includes="**/*.ice,**/*.h"/>
	  </copy>
	</target>

</project>
